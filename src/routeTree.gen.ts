/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DataEntryImport } from './routes/data-entry'
import { Route as DashboardsImport } from './routes/dashboards'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardsProjectsImport } from './routes/dashboards.projects'
import { Route as DashboardsLayeredImport } from './routes/dashboards.layered'
import { Route as DashboardsIndicatorsImport } from './routes/dashboards.indicators'
import { Route as DashboardsAdminImport } from './routes/dashboards.admin'

// Create/Update Routes

const DataEntryRoute = DataEntryImport.update({
  path: '/data-entry',
  getParentRoute: () => rootRoute,
} as any)

const DashboardsRoute = DashboardsImport.update({
  path: '/dashboards',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardsProjectsRoute = DashboardsProjectsImport.update({
  path: '/projects',
  getParentRoute: () => DashboardsRoute,
} as any)

const DashboardsLayeredRoute = DashboardsLayeredImport.update({
  path: '/layered',
  getParentRoute: () => DashboardsRoute,
} as any)

const DashboardsIndicatorsRoute = DashboardsIndicatorsImport.update({
  path: '/indicators',
  getParentRoute: () => DashboardsRoute,
} as any)

const DashboardsAdminRoute = DashboardsAdminImport.update({
  path: '/admin',
  getParentRoute: () => DashboardsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboards': {
      id: '/dashboards'
      path: '/dashboards'
      fullPath: '/dashboards'
      preLoaderRoute: typeof DashboardsImport
      parentRoute: typeof rootRoute
    }
    '/data-entry': {
      id: '/data-entry'
      path: '/data-entry'
      fullPath: '/data-entry'
      preLoaderRoute: typeof DataEntryImport
      parentRoute: typeof rootRoute
    }
    '/dashboards/admin': {
      id: '/dashboards/admin'
      path: '/admin'
      fullPath: '/dashboards/admin'
      preLoaderRoute: typeof DashboardsAdminImport
      parentRoute: typeof DashboardsImport
    }
    '/dashboards/indicators': {
      id: '/dashboards/indicators'
      path: '/indicators'
      fullPath: '/dashboards/indicators'
      preLoaderRoute: typeof DashboardsIndicatorsImport
      parentRoute: typeof DashboardsImport
    }
    '/dashboards/layered': {
      id: '/dashboards/layered'
      path: '/layered'
      fullPath: '/dashboards/layered'
      preLoaderRoute: typeof DashboardsLayeredImport
      parentRoute: typeof DashboardsImport
    }
    '/dashboards/projects': {
      id: '/dashboards/projects'
      path: '/projects'
      fullPath: '/dashboards/projects'
      preLoaderRoute: typeof DashboardsProjectsImport
      parentRoute: typeof DashboardsImport
    }
  }
}

// Create and export the route tree

interface DashboardsRouteChildren {
  DashboardsAdminRoute: typeof DashboardsAdminRoute
  DashboardsIndicatorsRoute: typeof DashboardsIndicatorsRoute
  DashboardsLayeredRoute: typeof DashboardsLayeredRoute
  DashboardsProjectsRoute: typeof DashboardsProjectsRoute
}

const DashboardsRouteChildren: DashboardsRouteChildren = {
  DashboardsAdminRoute: DashboardsAdminRoute,
  DashboardsIndicatorsRoute: DashboardsIndicatorsRoute,
  DashboardsLayeredRoute: DashboardsLayeredRoute,
  DashboardsProjectsRoute: DashboardsProjectsRoute,
}

const DashboardsRouteWithChildren = DashboardsRoute._addFileChildren(
  DashboardsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboards': typeof DashboardsRouteWithChildren
  '/data-entry': typeof DataEntryRoute
  '/dashboards/admin': typeof DashboardsAdminRoute
  '/dashboards/indicators': typeof DashboardsIndicatorsRoute
  '/dashboards/layered': typeof DashboardsLayeredRoute
  '/dashboards/projects': typeof DashboardsProjectsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboards': typeof DashboardsRouteWithChildren
  '/data-entry': typeof DataEntryRoute
  '/dashboards/admin': typeof DashboardsAdminRoute
  '/dashboards/indicators': typeof DashboardsIndicatorsRoute
  '/dashboards/layered': typeof DashboardsLayeredRoute
  '/dashboards/projects': typeof DashboardsProjectsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboards': typeof DashboardsRouteWithChildren
  '/data-entry': typeof DataEntryRoute
  '/dashboards/admin': typeof DashboardsAdminRoute
  '/dashboards/indicators': typeof DashboardsIndicatorsRoute
  '/dashboards/layered': typeof DashboardsLayeredRoute
  '/dashboards/projects': typeof DashboardsProjectsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboards'
    | '/data-entry'
    | '/dashboards/admin'
    | '/dashboards/indicators'
    | '/dashboards/layered'
    | '/dashboards/projects'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboards'
    | '/data-entry'
    | '/dashboards/admin'
    | '/dashboards/indicators'
    | '/dashboards/layered'
    | '/dashboards/projects'
  id:
    | '__root__'
    | '/'
    | '/dashboards'
    | '/data-entry'
    | '/dashboards/admin'
    | '/dashboards/indicators'
    | '/dashboards/layered'
    | '/dashboards/projects'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardsRoute: typeof DashboardsRouteWithChildren
  DataEntryRoute: typeof DataEntryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardsRoute: DashboardsRouteWithChildren,
  DataEntryRoute: DataEntryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboards",
        "/data-entry"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboards": {
      "filePath": "dashboards.tsx",
      "children": [
        "/dashboards/admin",
        "/dashboards/indicators",
        "/dashboards/layered",
        "/dashboards/projects"
      ]
    },
    "/data-entry": {
      "filePath": "data-entry.tsx"
    },
    "/dashboards/admin": {
      "filePath": "dashboards.admin.tsx",
      "parent": "/dashboards"
    },
    "/dashboards/indicators": {
      "filePath": "dashboards.indicators.tsx",
      "parent": "/dashboards"
    },
    "/dashboards/layered": {
      "filePath": "dashboards.layered.tsx",
      "parent": "/dashboards"
    },
    "/dashboards/projects": {
      "filePath": "dashboards.projects.tsx",
      "parent": "/dashboards"
    }
  }
}
ROUTE_MANIFEST_END */
